<?php

namespace Sdz\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    public function myFindAll()
    {
        return $this->createQueryBuilder('a')
                    ->getQuery()
                    ->getResult();
    
    }
    
    // Joindre les Articles par catégorie
    public function getAvecCategories(array $nom_categories)
    {
      $qb = $this->createQueryBuilder('a');
      // On fait une jointure avec l'entité Catégorie, avec pour alias << c >>
      $qb ->join('a.categories', 'c')
          ->where($qb->expr()->in('c.nom', $nom_categories)); //puis on filter sur le nom des catégories a l'aide d'un IN
          //Enfin, On retourn le resultat
          return $qb->getQuery()
                    ->getResult();
    }
    
    //Joindre les Commentaires a leur article
    
    public function getArticleAvecCommentaires()
    {
        $qb = $this->createQueryBuilder('a')
                   ->leftJoin('a.commentaires', 'c')
                   ->addSelect('c');
        
        return $qb->getQuery()
                  ->getResult();
    }
    
    // On ajoute 2 arguments: le nombre d'article par page et la page courante
    public function getArticles($nombreParPage, $page)
    {
        //On déplace la vérification du numéro de page dans cette méthode
        if( $page < 1 )
        {
            throw $this->createNotFoundException('La page inexistante  (page = '.$page.')' );
        }
        
        // La construction de la requête reste inchangée
        
        $query = $this->createQueryBuilder('a')
                      //On va joindre l'attribut image
                      ->leftJoin('a.image', 'i')
                        ->addSelect('i')
                      //On joint l'attribut catégorie
                      ->leftJoin('a.categories', 'c')
                        ->addSelect('c')
                      ->orderBy('a.date', 'DESC')
                      ->getQuery();
        //On definit l'article à partir duquel commencer la liste
        $query->setFirstResult(($page-1) * $nombreParPage )
        //Ainsi que le nombre d'articles a afficher
              ->setMaxResults($nombreParPage);
        
        //Enfin, On retourne l'objet Paginator correspondant à la requête construite
                      
        return new Paginator($query);
    }
    
    
}
